/******************************************************************************* 
 * Copyright (c) 2024 fxzjshm
 * This software is licensed under Mulan PubL v2.
 * You can use this software according to the terms and conditions of the Mulan PubL v2.
 * You may obtain a copy of Mulan PubL v2 at:
 *          http://license.coscl.org.cn/MulanPubL-2.0
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PubL v2 for more details.
 ******************************************************************************/

#pragma once
#ifndef SRTB_GUI_COLOR_CAST
#define SRTB_GUI_COLOR_CAST

// generated by DeepSeek-R1-Distill-Qwen-32B

#include <cstdint>
#include <string>

namespace srtb {
namespace gui {

constexpr uint8_t hex_char_to_int(char c) {
  if (c >= '0' && c <= '9') {
    return c - '0';
  } else if (c >= 'a' && c <= 'f') {
    return c - 'a' + 10;
  } else if (c >= 'A' && c <= 'F') {
    return c - 'A' + 10;
  } else {
    return 0;
  }
}

constexpr auto color_cast(std::string raw_s) -> uint32_t {
  std::string s;
  if (raw_s.size() == 7) {
    // #1f1e33
    s = "FF" + raw_s.substr(1);
  } else if (raw_s.size() == 9) {
    s = raw_s.substr(1);
  }

  uint8_t a = (hex_char_to_int(s[0]) << 4) | hex_char_to_int(s[1]);
  uint8_t r = (hex_char_to_int(s[2]) << 4) | hex_char_to_int(s[3]);
  uint8_t g = (hex_char_to_int(s[4]) << 4) | hex_char_to_int(s[5]);
  uint8_t b = (hex_char_to_int(s[6]) << 4) | hex_char_to_int(s[7]);

  return static_cast<uint32_t>((a << 24) | (r << 16) | (g << 8) | b);
}

}  // namespace gui
}  // namespace srtb

#endif  // SRTB_GUI_COLOR_CAST
